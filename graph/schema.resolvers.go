package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	model2 "graphql_dataloader/domain/model"
	"graphql_dataloader/graph/model"
	"graphql_dataloader/usecase/user"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos := []model2.Todo{}
	res := []*model.Todo{}
	if err := r.DB.Select(&todos, "select * from todos"); err != nil {
		return nil, err
	}
	for _, t := range todos {
		res = append(res, &model.Todo{
			ID:   t.ID,
			Name: t.Name,
			User: &model.User{
				ID: t.UserID,
			},
		})
	}
	return res, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	// user := model2.User{}
	// res := &model.User{}
	// if err := r.DB.Get(&user, "select * from users where id = $1", obj.User.ID); err != nil {
	// 	return nil, err
	// }
	// res.ID = user.ID
	// res.Name = user.Name
	// return res, nil
	thunk := user.For(ctx).FetchUsers.Load(ctx, obj.User.ID)
	u, err := thunk()
	if err != nil {
		return nil, err
	}
	return u, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
